{"meta":{"version":1,"warehouse":"3.0.1"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/img/icon_wechat.png","path":"img/icon_wechat.png","modified":0,"renderable":0},{"_id":"source/img/avatar/my-avatar.jpg","path":"img/avatar/my-avatar.jpg","modified":0,"renderable":0},{"_id":"themes/easy-read/source/css/archive.styl","path":"css/archive.styl","modified":0,"renderable":1},{"_id":"themes/easy-read/source/css/beantech.min.css","path":"css/beantech.min.css","modified":0,"renderable":1},{"_id":"themes/easy-read/source/css/beantech.css","path":"css/beantech.css","modified":0,"renderable":1},{"_id":"themes/easy-read/source/css/donate.css","path":"css/donate.css","modified":0,"renderable":1},{"_id":"themes/easy-read/source/css/highlight.styl","path":"css/highlight.styl","modified":0,"renderable":1},{"_id":"themes/easy-read/source/css/hux-blog.min.css","path":"css/hux-blog.min.css","modified":0,"renderable":1},{"_id":"themes/easy-read/source/css/rocket.styl","path":"css/rocket.styl","modified":0,"renderable":1},{"_id":"themes/easy-read/source/css/signature.styl","path":"css/signature.styl","modified":0,"renderable":1},{"_id":"themes/easy-read/source/css/toc.styl","path":"css/toc.styl","modified":0,"renderable":1},{"_id":"themes/easy-read/source/css/widget.styl","path":"css/widget.styl","modified":0,"renderable":1},{"_id":"themes/easy-read/source/fonts/glyphicons-halflings-regular.eot","path":"fonts/glyphicons-halflings-regular.eot","modified":0,"renderable":1},{"_id":"themes/easy-read/source/fonts/glyphicons-halflings-regular.woff","path":"fonts/glyphicons-halflings-regular.woff","modified":0,"renderable":1},{"_id":"themes/easy-read/source/fonts/glyphicons-halflings-regular.ttf","path":"fonts/glyphicons-halflings-regular.ttf","modified":0,"renderable":1},{"_id":"themes/easy-read/source/fonts/glyphicons-halflings-regular.woff2","path":"fonts/glyphicons-halflings-regular.woff2","modified":0,"renderable":1},{"_id":"themes/easy-read/source/js/hux-blog.js","path":"js/hux-blog.js","modified":0,"renderable":1},{"_id":"themes/easy-read/source/js/hux-blog.min.js","path":"js/hux-blog.min.js","modified":0,"renderable":1},{"_id":"themes/easy-read/source/js/bootstrap.min.js","path":"js/bootstrap.min.js","modified":0,"renderable":1},{"_id":"themes/easy-read/source/js/jquery.nav.js","path":"js/jquery.nav.js","modified":0,"renderable":1},{"_id":"themes/easy-read/source/js/jquery.tagcloud.js","path":"js/jquery.tagcloud.js","modified":0,"renderable":1},{"_id":"themes/easy-read/source/js/toc.js","path":"js/toc.js","modified":0,"renderable":1},{"_id":"themes/easy-read/source/js/totop.js","path":"js/totop.js","modified":0,"renderable":1},{"_id":"source/img/header_img/about.jpg","path":"img/header_img/about.jpg","modified":1,"renderable":0},{"_id":"themes/easy-read/source/css/bootstrap.min.css","path":"css/bootstrap.min.css","modified":0,"renderable":1},{"_id":"themes/easy-read/source/fonts/glyphicons-halflings-regular.svg","path":"fonts/glyphicons-halflings-regular.svg","modified":0,"renderable":1},{"_id":"themes/easy-read/source/js/bootstrap.js","path":"js/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/easy-read/source/js/jquery.min.js","path":"js/jquery.min.js","modified":0,"renderable":1},{"_id":"source/img/header_img/archive.jpg","path":"img/header_img/archive.jpg","modified":1,"renderable":0},{"_id":"source/img/header_img/archives-widget.jpg","path":"img/header_img/archives-widget.jpg","modified":0,"renderable":0},{"_id":"source/img/signature/BeanTechSign-white.png","path":"img/signature/BeanTechSign-white.png","modified":0,"renderable":0},{"_id":"themes/easy-read/source/css/images/ironman.png","path":"css/images/ironman.png","modified":0,"renderable":1},{"_id":"themes/easy-read/source/css/images/rocket.png","path":"css/images/rocket.png","modified":0,"renderable":1},{"_id":"themes/easy-read/source/css/bootstrap.css","path":"css/bootstrap.css","modified":0,"renderable":1},{"_id":"source/img/signature/BeanTechSign-black.png","path":"img/signature/BeanTechSign-black.png","modified":0,"renderable":0},{"_id":"themes/easy-read/source/js/jquery.js","path":"js/jquery.js","modified":0,"renderable":1},{"_id":"source/img/article_header/article_bg.jpg","path":"img/article_header/article_bg.jpg","modified":1,"renderable":0},{"_id":"source/img/header_img/home.jpg","path":"img/header_img/home.jpg","modified":1,"renderable":0},{"_id":"source/img/header_img/home-bg-o.png","path":"img/header_img/home-bg-o.png","modified":0,"renderable":0},{"_id":"source/img/header_img/home2.png","path":"img/header_img/home2.png","modified":0,"renderable":0},{"_id":"source/img/article_header/article_header.jpg","path":"img/article_header/article_header.jpg","modified":1,"renderable":0},{"_id":"source/img/header_img/404.jpg","path":"img/header_img/404.jpg","modified":1,"renderable":0},{"_id":"source/img/header_img/tag.jpg","path":"img/header_img/tag.jpg","modified":1,"renderable":0}],"Cache":[{"_id":"themes/easy-read/.DS_Store","hash":"653e19f4c40bac91735c7983588409775eb0e2ea","modified":1571233227507},{"_id":"source/.DS_Store","hash":"5173d86a33460ea539cf231d7869c3408364d04f","modified":1571233240843},{"_id":"source/CNAME","hash":"83255628c365d50e5fb4ddfd657c18907ff57e7b","modified":1571238586272},{"_id":"source/404.md","hash":"8aa56af7bcd7cd23667cbf3eb5b5c9fa4533eb60","modified":1547988904000},{"_id":"themes/easy-read/_config.yml","hash":"e800e32847df32dacddb5202823a004557023bcd","modified":1547988904000},{"_id":"themes/easy-read/LICENSE","hash":"2b209f06bebeb2a8c2b7e187e436f3e1e1fbc8a7","modified":1547988904000},{"_id":"source/_posts/js-进阶之执行上下文和执行栈.md","hash":"f1387a7a9df3750f289235883aab5a37d4069a4d","modified":1571535701652},{"_id":"source/img/.DS_Store","hash":"f7c2e1a5407569ff4a5f3dc11c934851d06f724e","modified":1571234092039},{"_id":"source/_posts/hello-world.md","hash":"b158415164e40e82af08d8971807b1733120e3d6","modified":1571542654431},{"_id":"source/archive/index.md","hash":"40c6d6d8a40f8133e48eaf8111df4a361d6ac30d","modified":1547988904000},{"_id":"source/about/index.md","hash":"ddd9efe9343d982279875541974326cae5c56aea","modified":1571234210031},{"_id":"source/tags/index.md","hash":"f6ad1039c242795de5cd7d81781148f8c5298c28","modified":1547988904000},{"_id":"source/img/icon_wechat.png","hash":"4188058026609de06c6cac88b349a2da831a1783","modified":1547988904000},{"_id":"themes/easy-read/languages_to_be_added/de.yml","hash":"424a9c1e6ab69334d7873f6574da02ca960aa572","modified":1547988904000},{"_id":"themes/easy-read/languages_to_be_added/default.yml","hash":"97326c9e6518d9f379778178b3b8f9a58434725d","modified":1547988904000},{"_id":"themes/easy-read/languages_to_be_added/es.yml","hash":"cb4eeca0ed3768a77e0cd216300f2b2549628b1b","modified":1547988904000},{"_id":"themes/easy-read/languages_to_be_added/en.yml","hash":"97326c9e6518d9f379778178b3b8f9a58434725d","modified":1547988904000},{"_id":"themes/easy-read/languages_to_be_added/pl.yml","hash":"de7eb5850ae65ba7638e907c805fea90617a988c","modified":1547988904000},{"_id":"themes/easy-read/languages_to_be_added/no.yml","hash":"8ca475a3b4f8efe6603030f0013aae39668230e1","modified":1547988904000},{"_id":"themes/easy-read/languages_to_be_added/zh-TW.yml","hash":"9acac6cc4f8002c3fa53ff69fb8cf66c915bd016","modified":1547988904000},{"_id":"themes/easy-read/languages_to_be_added/ru.yml","hash":"42df7afeb7a35dc46d272b7f4fb880a9d9ebcaa5","modified":1547988904000},{"_id":"themes/easy-read/layout/404.ejs","hash":"40de38bd399f6f4aef0d6c63c7b13b02d74f1c56","modified":1547988904000},{"_id":"themes/easy-read/languages_to_be_added/zh-CN.yml","hash":"7bfcb0b8e97d7e5edcfca8ab26d55d9da2573c1c","modified":1547988904000},{"_id":"themes/easy-read/layout/about.ejs","hash":"c35cbf5f74d64e9b600981b64d1c5a0d7f79abdc","modified":1571538254531},{"_id":"themes/easy-read/layout/index.ejs","hash":"9b2ab4b49970d21a627b9d7c0ed072d6e0ae53f2","modified":1571542601035},{"_id":"themes/easy-read/layout/layout.ejs","hash":"a5af5b99ac3456ab5da1a319455904b979b91601","modified":1547988904000},{"_id":"themes/easy-read/layout/post.ejs","hash":"8f3ad198f7e9502c3e817792277796f9be570c88","modified":1571538445319},{"_id":"themes/easy-read/layout/page.ejs","hash":"8b925abde16c7e4c323e1ea8227be7b0917b6ba7","modified":1571538254531},{"_id":"themes/easy-read/layout/keynote.ejs","hash":"a097a16cf6d8be87d0537a7cf8cd039703fe813a","modified":1571538254531},{"_id":"themes/easy-read/layout/tags.ejs","hash":"2c72eb2e89130658aa068d80d27b561b509c5dcd","modified":1547988904000},{"_id":"themes/easy-read/layout/archive.ejs","hash":"72a150c8dff0031a9107d12eaa7c2e6c6ce950d2","modified":1547988904000},{"_id":"source/img/article/tag.png","hash":"c8632d64d9471009098b84f70273e63037a4e7b8","modified":1547988904000},{"_id":"source/img/avatar/my-avatar.jpg","hash":"aa7be9827962c1f408d22ccf636de33d38f2c0ed","modified":1528161243970},{"_id":"themes/easy-read/layout/_partial/nav.ejs","hash":"4c905166c960852e9b9a3c9d5c680091e37b481f","modified":1547988904000},{"_id":"themes/easy-read/layout/_partial/sidebar.ejs","hash":"2e4e528a555917b2a267da4db2440bcc4a7a65ab","modified":1547988904000},{"_id":"themes/easy-read/layout/_widget/archive.ejs","hash":"7594929d472806ca4c64d9906d9903a96de111a0","modified":1547988904000},{"_id":"themes/easy-read/layout/_widget/featured-tags.ejs","hash":"0c9ce1942f1943dc8891a9302a922ef1ffe300c5","modified":1547988904000},{"_id":"themes/easy-read/layout/_partial/head.ejs","hash":"d911f4e3b441abcc4c91d34d0abc09a9ad28fb52","modified":1571536139908},{"_id":"themes/easy-read/layout/_widget/category.ejs","hash":"1cf485def07dc06e870dc9613767c6c614bcf428","modified":1547988904000},{"_id":"themes/easy-read/layout/_partial/toc.ejs","hash":"26ff2298ba436efb8fc4ae58f27e0caaf549bbb2","modified":1571539125515},{"_id":"themes/easy-read/layout/_partial/footer.ejs","hash":"5b7815de3b9738ef55ce90c5dfa2544a9d016202","modified":1571542855694},{"_id":"themes/easy-read/layout/_widget/friends-blog.ejs","hash":"734d3775017aedac185028924baf890a71a74548","modified":1547988904000},{"_id":"themes/easy-read/layout/_partial/header.ejs","hash":"3bd09df76e0622d76d186b020393fcab361e6c97","modified":1547988904000},{"_id":"themes/easy-read/layout/_widget/recent-posts.ejs","hash":"e08ab8ba60e31638006acf27f066b989a0a3c433","modified":1547988904000},{"_id":"themes/easy-read/layout/_widget/short-about.ejs","hash":"315de02246f07c747c32495e107ad7b19cb3ff54","modified":1547988904000},{"_id":"themes/easy-read/layout/_partial/pagination.ejs","hash":"557d6bb069a1d48af49ae912994653f44b32a570","modified":1547988904000},{"_id":"themes/easy-read/source/css/archive.styl","hash":"715bcbd085eb95ec26c9805c11c374919cde971c","modified":1547988904000},{"_id":"themes/easy-read/source/css/beantech.min.css","hash":"05a06230b1a9eca0b30cece54a397008cb77dc50","modified":1547988904000},{"_id":"themes/easy-read/source/css/beantech.css","hash":"4c361354fd8e9851923fb21a620bc079380ebcd8","modified":1547988904000},{"_id":"themes/easy-read/source/css/donate.css","hash":"f65ac8363d8d215adb896158e7b45165db259a47","modified":1547988904000},{"_id":"themes/easy-read/source/css/highlight.styl","hash":"e842080e6d580f0f70a7df71fbde3c4e49463c19","modified":1547988904000},{"_id":"themes/easy-read/source/css/hux-blog.min.css","hash":"1baef04de262aeb7023d835429b49a805ac4ab40","modified":1547988904000},{"_id":"themes/easy-read/source/css/rocket.styl","hash":"e15c51c8566ecd943112e57592888dd318b6fa6a","modified":1547988904000},{"_id":"themes/easy-read/source/css/signature.styl","hash":"88159b31c59d59c01a0b534af57242662a2a3969","modified":1547988904000},{"_id":"themes/easy-read/source/css/toc.styl","hash":"631e97f634d30f53314e2fec8bdde267c1c49f4c","modified":1547988904000},{"_id":"themes/easy-read/source/css/widget.styl","hash":"7a9f735f5ef323dc2950fbd9d76daa16c9a0f1a9","modified":1547988904000},{"_id":"themes/easy-read/source/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1547988904000},{"_id":"themes/easy-read/source/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1547988904000},{"_id":"themes/easy-read/source/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1547988904000},{"_id":"themes/easy-read/source/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1547988904000},{"_id":"themes/easy-read/source/js/hux-blog.js","hash":"4b4d3c557405d04c3087d36c13e2834fe05c0f73","modified":1547988904000},{"_id":"themes/easy-read/source/js/hux-blog.min.js","hash":"1563e7f70550ac6b30803d6f449719b853200e35","modified":1547988904000},{"_id":"themes/easy-read/source/js/bootstrap.min.js","hash":"b3f2ef9f985e7906c9360756b73cd64bf7733647","modified":1547988904000},{"_id":"themes/easy-read/source/js/jquery.nav.js","hash":"ef2160a456176a4d09cc0b95d52b27dfbbadf2d8","modified":1547988904000},{"_id":"themes/easy-read/source/js/jquery.tagcloud.js","hash":"4e5fd0b07f3bd935f2e603710447e039e3677211","modified":1547988904000},{"_id":"themes/easy-read/source/js/toc.js","hash":"41e52551731854224c249d53010c1bae5aa92ffa","modified":1547988904000},{"_id":"themes/easy-read/source/js/totop.js","hash":"c05360f6fc699ac12e794b1764b4a952713a3017","modified":1547988904000},{"_id":"source/img/header_img/about.jpg","hash":"62a9a76854503c327990cc8d10de293ab6e9588f","modified":1547988904000},{"_id":"themes/easy-read/source/css/bootstrap.min.css","hash":"fec7b176a4b9a67c0eb5d184f57b84297efc23aa","modified":1547988904000},{"_id":"themes/easy-read/source/fonts/glyphicons-halflings-regular.svg","hash":"de51a8494180a6db074af2dee2383f0a363c5b08","modified":1547988904000},{"_id":"themes/easy-read/source/js/bootstrap.js","hash":"f8752e9ae24daec0a0baffd7819122f8c6fd9103","modified":1547988904000},{"_id":"themes/easy-read/source/js/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1547988904000},{"_id":"source/img/header_img/archive.jpg","hash":"990f6f9dd0ecb5348bfcc47305553d58c0d8f326","modified":1547988904000},{"_id":"source/img/header_img/archives-widget.jpg","hash":"68f7d525269a94287e0ad18713ae232fb59dcf71","modified":1547988904000},{"_id":"source/img/signature/BeanTechSign-white.png","hash":"34289ed41cf9ddac2d56be46fbb1515b7d5913cd","modified":1547988904000},{"_id":"themes/easy-read/source/css/images/ironman.png","hash":"2f0db0ab15d466c4065d9f6102fdf829726d9e3f","modified":1547988904000},{"_id":"themes/easy-read/source/css/images/rocket.png","hash":"6dee0406955aa9b7a261161d30f2538a671e806b","modified":1547988904000},{"_id":"themes/easy-read/source/css/bootstrap.css","hash":"41c54bf695145ae0b4d9020a1da308ceb05dcaf3","modified":1547988904000},{"_id":"source/img/signature/BeanTechSign-black.png","hash":"94b7102e819fd6ee082d3fb0166f4de7458c22ff","modified":1547988904000},{"_id":"themes/easy-read/source/js/jquery.js","hash":"1852661bd11a09ca9b9cb63d1aa6ff390fffaf4e","modified":1547988904000},{"_id":"source/img/article_header/article_bg.jpg","hash":"6af63305c923899017e727b5ca968a2703bc08cf","modified":1547988904000},{"_id":"source/img/avatar/ironman.png","hash":"7d6a06b4b544ab146c3b3e8474edc33f14ac6e4d","modified":1547988904000},{"_id":"source/img/article/huweihuang_blog.png","hash":"392cf8b33be6c752dd908e027fa3346a6ecd58ab","modified":1547988904000},{"_id":"source/img/header_img/home.jpg","hash":"8f1c440427a4aa86b623503a926c027e2e10cd66","modified":1547988904000},{"_id":"source/img/header_img/tag.png","hash":"e83cd7b04ff85bcbc9bd3ebf5e57a55166e82568","modified":1547988904000},{"_id":"source/img/article_header/article_header.png","hash":"d9fa12f1e40924a0db57761d09d52dce450b4f7b","modified":1547988904000},{"_id":"source/img/header_img/home-bg-o.png","hash":"134ece4cb4c49c7ca1403a5afe7f46d0e2f9ecbb","modified":1547988904000},{"_id":"source/img/header_img/home2.png","hash":"da6a3d5ca787bdc25e69655abd879b4f821aeb30","modified":1547988904000},{"_id":"source/img/header_img/404.png","hash":"6bf9c224543ec54e250309db89cbdf46e0c4b5ba","modified":1547988904000},{"_id":"public/post-sitemap.xml","hash":"0cda554c4c3fdcd9c332bc5b2d33b1ce7a09f0ec","modified":1571541272722},{"_id":"public/tag-sitemap.xml","hash":"d8ebde1f1d169955e790ab526b6a7696cd8f00b2","modified":1571541272722},{"_id":"public/page-sitemap.xml","hash":"9ef7cc78ae564caea78013b3ffc2d151e1bbae13","modified":1571541272722},{"_id":"public/sitemap.xml","hash":"93bb65ef27881f5a9893fa98b232f6216e9a3ecb","modified":1571541272722},{"_id":"public/sitemap.xsl","hash":"4321fa69dc1b8811d32b7a1478e5603e038cea1a","modified":1571541272722},{"_id":"public/404.html","hash":"031e1e552f439d35d77abf9f025c6fa9543ffae8","modified":1571541272722},{"_id":"public/tags/index.html","hash":"80f0a77ab37bb3783a148a41466a1c764af3cecb","modified":1571541272722},{"_id":"public/article/hello-world/index.html","hash":"6de8369b569e03c9eb5dab975169d56738b1426c","modified":1571541272722},{"_id":"public/archive/index.html","hash":"705fc5dd33ff6067c28f9ab1ac3de0d1542192a5","modified":1571541272722},{"_id":"public/archives/index.html","hash":"f992219fb0756ae05c1cf66c29d9ef018def5d94","modified":1571541272722},{"_id":"public/index.html","hash":"8b8e77ac555eedee63cef072686e5d66f0f47422","modified":1571541272722},{"_id":"public/archives/2019/index.html","hash":"a7d707a1924e52aab6145d187f2a3eb9d1993150","modified":1571541272722},{"_id":"public/about/index.html","hash":"f5415381f037f1a9e7556310ba12554fd05bb4cf","modified":1571541272722},{"_id":"public/archives/2019/10/index.html","hash":"eddff70ce9d50f47fdf558e208e571fe62ad4436","modified":1571541272722},{"_id":"public/tags/Life/index.html","hash":"6c093c3a8e691378f2da2bc810fd5ef572709168","modified":1571541272722},{"_id":"public/tags/JavaScript/index.html","hash":"2be8262c9c9f4c79f0feb72fb4d554b029c4829b","modified":1571541272722},{"_id":"public/article/js-进阶之执行上下文和执行栈/index.html","hash":"69ec1899008fc2c61b276a2f55f05e566c3e16a4","modified":1571541272722}],"Category":[],"Data":[],"Page":[{"layout":"404","description":"你来到了没有知识的荒原","header-img":"/img/header_img/404.jpg","_content":"","source":"404.md","raw":"---\nlayout: 404\ndescription: \"你来到了没有知识的荒原\"\nheader-img: \"/img/header_img/404.jpg\"\n---\n","date":"2019-10-20T04:13:57.846Z","updated":"2019-10-20T04:13:57.846Z","path":"404.html","_id":"ck1ycenjh0000rdje3emk9arx","title":"","comments":1,"content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"archive","title":"Archives","header-img":"/img/header_img/archive.jpg","comments":0,"date":"2017-09-20T12:49:56.000Z","description":"Hey, this is archives","_content":"","source":"archive/index.md","raw":"---\nlayout: \"archive\"\ntitle: \"Archives\"\nheader-img: \"/img/header_img/archive.jpg\"\ncomments: false\ndate: 2017-09-20 20:49:56\ndescription: \"Hey, this is archives\"\n---\n","updated":"2019-01-20T12:55:04.000Z","path":"archive/index.html","_id":"ck1ycenkv0002rdjed9deg3np","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"about","title":"About","date":"2019-10-16T13:53:01.000Z","description":"Left hand guitar, Right hand code","header-img":"/img/header_img/about.jpg","aplayer":true,"fixed":false,"_content":"\n### In a world\n\n>Left hand guitar, Right hand code\n\n### About\n\n>An idealist man\n\n### Direction of interest\n\n> All about IT \n\n### Community\n\n > Github: https://github.com/kavience\n > ZhiHu: https://zhihu.com/people/kavience-xiaofan\n\n### Contract me\n\n>Email: kavience@gmail.com\n\n","source":"about/index.md","raw":"---\nlayout: \"about\"\ntitle: \"About\"\ndate: 2019-10-16 21:52:61\ndescription: \"Left hand guitar, Right hand code\"\nheader-img: \"/img/header_img/about.jpg\"\naplayer: true\nfixed: false\n---\n\n### In a world\n\n>Left hand guitar, Right hand code\n\n### About\n\n>An idealist man\n\n### Direction of interest\n\n> All about IT \n\n### Community\n\n > Github: https://github.com/kavience\n > ZhiHu: https://zhihu.com/people/kavience-xiaofan\n\n### Contract me\n\n>Email: kavience@gmail.com\n\n","updated":"2019-10-20T04:23:37.625Z","path":"about/index.html","_id":"ck1ycenky0004rdje3dc755jn","comments":1,"content":"<h3 id=\"in-a-world\">In a world</h3>\n<blockquote>\n<p>Left hand guitar, Right hand code</p>\n</blockquote>\n<h3 id=\"about\">About</h3>\n<blockquote>\n<p>An idealist man</p>\n</blockquote>\n<h3 id=\"direction-of-interest\">Direction of interest</h3>\n<blockquote>\n<p>All about IT</p>\n</blockquote>\n<h3 id=\"community\">Community</h3>\n<blockquote>\n<p>Github: <a href=\"https://github.com/kavience\" target=\"_blank\" rel=\"noopener\">https://github.com/kavience</a><br>\nZhiHu: <a href=\"https://zhihu.com/people/kavience-xiaofan\" target=\"_blank\" rel=\"noopener\">https://zhihu.com/people/kavience-xiaofan</a></p>\n</blockquote>\n<h3 id=\"contract-me\">Contract me</h3>\n<blockquote>\n<p>Email: <a href=\"mailto:kavience@gmail.com\" target=\"_blank\" rel=\"noopener\">kavience@gmail.com</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h3>In a world</h3>\n<blockquote>\n<p>Left hand guitar, Right hand code</p>\n</blockquote>\n<h3>About</h3>\n<blockquote>\n<p>An idealist man</p>\n</blockquote>\n<h3>Direction of interest</h3>\n<blockquote>\n<p>All about IT</p>\n</blockquote>\n<h3>Community</h3>\n<blockquote>\n<p>Github: <a href=\"https://github.com/kavience\" target=\"_blank\" rel=\"noopener\">https://github.com/kavience</a><br>\nZhiHu: <a href=\"https://zhihu.com/people/kavience-xiaofan\" target=\"_blank\" rel=\"noopener\">https://zhihu.com/people/kavience-xiaofan</a></p>\n</blockquote>\n<h3>Contract me</h3>\n<blockquote>\n<p>Email: <a href=\"mailto:kavience@gmail.com\" target=\"_blank\" rel=\"noopener\">kavience@gmail.com</a></p>\n</blockquote>\n"},{"layout":"tags","title":"Tags","description":"Hey, this is Tags.","header-img":"/img/header_img/tag.jpg","_content":"","source":"tags/index.md","raw":"---\nlayout: \"tags\"\ntitle: \"Tags\"\ndescription: \"Hey, this is Tags.\"\nheader-img: \"/img/header_img/tag.jpg\"\n---\n","date":"2019-10-20T04:17:52.459Z","updated":"2019-10-20T04:17:52.459Z","path":"tags/index.html","_id":"ck1ycenl20006rdje4u890x93","comments":1,"content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"js 进阶之执行上下文和执行栈","catalog":true,"date":"2019-10-19T02:50:06.000Z","subtitle":null,"header-img":null,"catagories":["JavaScript"],"_content":"## 什么是 JavaScript 执行上下文？\n> 执行上下文是评估和执行 JavaScript 代码的环境的抽象概念，Javascript 代码都是在执行上下文中运行。\n\n## 什么是 JavaScript 执行栈？\n> 执行栈，也叫调用栈，具有 LIFO（后进先出）结构，用于存储在代码执行期间创建的所有执行上下文。\n首次运行JS代码时，会创建一个全局执行上下文并Push到当前的执行栈中。每当发生函数调用，引擎都会为该函数创建一个新的函数执行上下文并Push到当前执行栈的栈顶。\n根据执行栈LIFO规则，当栈顶函数运行完成后，其对应的函数执行上下文将会从执行栈中Pop出，上下文控制权将移到当前执行栈的下一个执行上下文。\n\n## 执行上下文的类型\n执行上下文总共有三种类型\n- 全局执行上下文：只有一个，浏览器中的全局对象就是 window 对象，nodejs 中的全局对象就是 module 对象, this 指向这个全局对象。\n- 函数执行上下文：存在无数个，只有在函数被调用的时候才会被创建，每次调用函数都会创建一个新的执行上下文。\n- Eval 函数执行上下文： 指的是运行在 eval 函数中的代码，很少用而且不建议使用。\n\n## 执行上下文的创建\n执行上下文分两个阶段创建：\n1. 创建阶段 \n2. 执行阶段\n### 创建阶段\n1、确定 this 的值，也被称为 This Binding。\n2、LexicalEnvironment（词法环境） 组件被创建。\n3、VariableEnvironment（变量环境） 组件被创建。\n#### This Binding\n- 全局执行上下文中， this 的值指向全局对象，在浏览器中 this 的值指向 window 对象，而在 nodejs 中指向这个文件的 module 对象。\n- 函数执行上下文中， this 的值取决于函数的调用方式。具体有：默认绑定、隐式绑定、显式绑定（硬绑定）、new绑定、箭头函数等，详情请看[函数执行上下文](#函数执行上下文)\n\n#### 词法环境（Lexical Environment）\n词法环境有两个组成部分\n1. 环境记录：存储变量和函数声明的实际位置\n\n2. 对外部环境的引用：可以访问其外部词法环境\n\n词法环境有两种类型\n\n1. 全局环境：是一个没有外部环境的词法环境，其外部环境引用为 null 。拥有一个全局对象（ window 对象）及其关联的方法和属性（例如数组方法）以及任何用户自定义的全局变量， this 的值指向这个全局对象。\n\n2. 函数环境：用户在函数中定义的变量被存储在环境记录中，包含了 arguments 对象。对外部环境的引用可以是全局环境，也可以是包含内部函数的外部函数环境。\n\n#### 变量环境\n变量环境也是一个词法环境，因此它具有上面定义的词法环境的所有属性。\n\n在 ES6 中，词法环境和变量环境的区别在于前者用于存储 **函数声明和变量（ let 和 const ）绑定，而后者仅用于存储变量（ var ）** 绑定。\n> **变量提升**的原因：在创建阶段，函数声明存储在环境中，而变量会被设置为 undefined（在 var 的情况下）或保持未初始化（在 let 和 const 的情况下）。所以这就是为什么可以在声明之前访问 var 定义的变量（尽管是 undefined ），但如果在声明之前访问 let 和 const 定义的变量就会提示引用错误的原因。这就是所谓的变量提升。\n\n```javascript\nfoo();  // foo2\nvar foo = function() {\n    console.log('foo1');\n}\n\nfoo();  // foo1，foo重新赋值\n\nfunction foo() {\n    console.log('foo2');\n}\n\nfoo(); // foo1\n```\n**注意：** 函数声明优先级高于变量声明，同一作用域下存在多个同名函数声明，后面的会替换前面的函数声明。\n\n### 执行阶段\n此阶段，完成对所有变量的分配，最后执行代码。\n\n如果 Javascript 引擎在源代码中声明的实际位置找不到 let 变量的值，那么将为其分配 undefined 值。\n\n## 执行上下文栈\n因为 JS 引擎创建了很多的执行上下文，所以 JS 引擎创建了执行上下文栈（Execution context stack，ECS）来管理执行上下文。\n\n当 JavaScript 初始化的时候会向执行上下文栈压入一个全局执行上下文，我们用 globalContext 表示它，并且只有当整个应用程序结束的时候，执行栈才会被清空，所以程序结束之前， 执行栈最底部永远有个 globalContext 。\n\n观察以下两段代码：\n```javascript\nvar scope = \"global scope\";\nfunction checkscope(){\n    var scope = \"local scope\";\n    function f(){\n        return scope;\n    }\n    return f();\n}\ncheckscope();\n```\n```javascript\nvar scope = \"global scope\";\nfunction checkscope(){\n    var scope = \"local scope\";\n    function f(){\n        return scope;\n    }\n    return f;\n}\ncheckscope()();\n```\n它们的运行结果是一样的，但执行上下文栈的变化不一样。\n第一段代码：\n```javascript\nECStack.push(<checkscope> functionContext);\nECStack.push(<f> functionContext);\nECStack.pop();\nECStack.pop();\n```\n第二段代码：\n```javascript\nECStack.push(<checkscope> functionContext);\nECStack.pop();\nECStack.push(<f> functionContext);\nECStack.pop();\n```\n## 函数执行上下文\n上面提到过[执行上下文的类型](#执行上下文的类型)有全局执行上下文和函数执行上下文。\n\n在函数上下文中，用活动对象( activation object, AO )来表示变量对象。\n\n活动对象和变量对象的区别在于\n\n1、变量对象（ VO ）是规范上或者是 JS 引擎上实现的，并不能在 JS 环境中直接访问。\n2、当进入到一个执行上下文后，这个变量对象才会被激活，所以叫活动对象（ AO ），这时候活动对象上的各种属性才能被访问。\n调用函数时，会为其创建一个 Arguments 对象，并自动初始化局部变量 arguments ，指代该 Arguments 对象。所有作为参数传入的值都会成为 Arguments 对象的数组元素。\n\n### 执行过程\n执行上下文的代码会分成两个阶段进行处理\n\n1. 进入执行上下文\n2. 代码执行\n\n#### 进入执行上下文\n很明显，这个时候还没有执行代码，此时的变量对象会包括（如下顺序初始化）：\n1. **函数的所有形参 ( only 函数上下文)**：没有实参，属性值设为 undefined 。\n2. **函数声明**：如果变量对象已经存在相同名称的属性，则完全替换这个属性。\n3. **变量声明**：如果变量名称跟已经声明的形参或函数相同，则变量声明不会干扰已经存在的这类属性。\n\n#### 代码执行\n这个阶段会顺序执行代码，修改变量对象的值，执行完成后AO如下\n\n### 总结如下 ：\n1. 全局上下文的变量对象初始化是全局对象\n2. 函数上下文的变量对象初始化只包括 Arguments 对象\n3. 在进入执行上下文时会给变量对象添加形参、函数声明、变量声明等初始的属性值\n4. 在代码执行阶段，会再次修改变量对象的属性值\n\n(done)","source":"_posts/js-进阶之执行上下文和执行栈.md","raw":"---\ntitle: js 进阶之执行上下文和执行栈\ncatalog: true\ndate: 2019-10-19 10:50:06\nsubtitle:\nheader-img:\ntags:\n- JavaScript\ncatagories:\n- JavaScript\n---\n## 什么是 JavaScript 执行上下文？\n> 执行上下文是评估和执行 JavaScript 代码的环境的抽象概念，Javascript 代码都是在执行上下文中运行。\n\n## 什么是 JavaScript 执行栈？\n> 执行栈，也叫调用栈，具有 LIFO（后进先出）结构，用于存储在代码执行期间创建的所有执行上下文。\n首次运行JS代码时，会创建一个全局执行上下文并Push到当前的执行栈中。每当发生函数调用，引擎都会为该函数创建一个新的函数执行上下文并Push到当前执行栈的栈顶。\n根据执行栈LIFO规则，当栈顶函数运行完成后，其对应的函数执行上下文将会从执行栈中Pop出，上下文控制权将移到当前执行栈的下一个执行上下文。\n\n## 执行上下文的类型\n执行上下文总共有三种类型\n- 全局执行上下文：只有一个，浏览器中的全局对象就是 window 对象，nodejs 中的全局对象就是 module 对象, this 指向这个全局对象。\n- 函数执行上下文：存在无数个，只有在函数被调用的时候才会被创建，每次调用函数都会创建一个新的执行上下文。\n- Eval 函数执行上下文： 指的是运行在 eval 函数中的代码，很少用而且不建议使用。\n\n## 执行上下文的创建\n执行上下文分两个阶段创建：\n1. 创建阶段 \n2. 执行阶段\n### 创建阶段\n1、确定 this 的值，也被称为 This Binding。\n2、LexicalEnvironment（词法环境） 组件被创建。\n3、VariableEnvironment（变量环境） 组件被创建。\n#### This Binding\n- 全局执行上下文中， this 的值指向全局对象，在浏览器中 this 的值指向 window 对象，而在 nodejs 中指向这个文件的 module 对象。\n- 函数执行上下文中， this 的值取决于函数的调用方式。具体有：默认绑定、隐式绑定、显式绑定（硬绑定）、new绑定、箭头函数等，详情请看[函数执行上下文](#函数执行上下文)\n\n#### 词法环境（Lexical Environment）\n词法环境有两个组成部分\n1. 环境记录：存储变量和函数声明的实际位置\n\n2. 对外部环境的引用：可以访问其外部词法环境\n\n词法环境有两种类型\n\n1. 全局环境：是一个没有外部环境的词法环境，其外部环境引用为 null 。拥有一个全局对象（ window 对象）及其关联的方法和属性（例如数组方法）以及任何用户自定义的全局变量， this 的值指向这个全局对象。\n\n2. 函数环境：用户在函数中定义的变量被存储在环境记录中，包含了 arguments 对象。对外部环境的引用可以是全局环境，也可以是包含内部函数的外部函数环境。\n\n#### 变量环境\n变量环境也是一个词法环境，因此它具有上面定义的词法环境的所有属性。\n\n在 ES6 中，词法环境和变量环境的区别在于前者用于存储 **函数声明和变量（ let 和 const ）绑定，而后者仅用于存储变量（ var ）** 绑定。\n> **变量提升**的原因：在创建阶段，函数声明存储在环境中，而变量会被设置为 undefined（在 var 的情况下）或保持未初始化（在 let 和 const 的情况下）。所以这就是为什么可以在声明之前访问 var 定义的变量（尽管是 undefined ），但如果在声明之前访问 let 和 const 定义的变量就会提示引用错误的原因。这就是所谓的变量提升。\n\n```javascript\nfoo();  // foo2\nvar foo = function() {\n    console.log('foo1');\n}\n\nfoo();  // foo1，foo重新赋值\n\nfunction foo() {\n    console.log('foo2');\n}\n\nfoo(); // foo1\n```\n**注意：** 函数声明优先级高于变量声明，同一作用域下存在多个同名函数声明，后面的会替换前面的函数声明。\n\n### 执行阶段\n此阶段，完成对所有变量的分配，最后执行代码。\n\n如果 Javascript 引擎在源代码中声明的实际位置找不到 let 变量的值，那么将为其分配 undefined 值。\n\n## 执行上下文栈\n因为 JS 引擎创建了很多的执行上下文，所以 JS 引擎创建了执行上下文栈（Execution context stack，ECS）来管理执行上下文。\n\n当 JavaScript 初始化的时候会向执行上下文栈压入一个全局执行上下文，我们用 globalContext 表示它，并且只有当整个应用程序结束的时候，执行栈才会被清空，所以程序结束之前， 执行栈最底部永远有个 globalContext 。\n\n观察以下两段代码：\n```javascript\nvar scope = \"global scope\";\nfunction checkscope(){\n    var scope = \"local scope\";\n    function f(){\n        return scope;\n    }\n    return f();\n}\ncheckscope();\n```\n```javascript\nvar scope = \"global scope\";\nfunction checkscope(){\n    var scope = \"local scope\";\n    function f(){\n        return scope;\n    }\n    return f;\n}\ncheckscope()();\n```\n它们的运行结果是一样的，但执行上下文栈的变化不一样。\n第一段代码：\n```javascript\nECStack.push(<checkscope> functionContext);\nECStack.push(<f> functionContext);\nECStack.pop();\nECStack.pop();\n```\n第二段代码：\n```javascript\nECStack.push(<checkscope> functionContext);\nECStack.pop();\nECStack.push(<f> functionContext);\nECStack.pop();\n```\n## 函数执行上下文\n上面提到过[执行上下文的类型](#执行上下文的类型)有全局执行上下文和函数执行上下文。\n\n在函数上下文中，用活动对象( activation object, AO )来表示变量对象。\n\n活动对象和变量对象的区别在于\n\n1、变量对象（ VO ）是规范上或者是 JS 引擎上实现的，并不能在 JS 环境中直接访问。\n2、当进入到一个执行上下文后，这个变量对象才会被激活，所以叫活动对象（ AO ），这时候活动对象上的各种属性才能被访问。\n调用函数时，会为其创建一个 Arguments 对象，并自动初始化局部变量 arguments ，指代该 Arguments 对象。所有作为参数传入的值都会成为 Arguments 对象的数组元素。\n\n### 执行过程\n执行上下文的代码会分成两个阶段进行处理\n\n1. 进入执行上下文\n2. 代码执行\n\n#### 进入执行上下文\n很明显，这个时候还没有执行代码，此时的变量对象会包括（如下顺序初始化）：\n1. **函数的所有形参 ( only 函数上下文)**：没有实参，属性值设为 undefined 。\n2. **函数声明**：如果变量对象已经存在相同名称的属性，则完全替换这个属性。\n3. **变量声明**：如果变量名称跟已经声明的形参或函数相同，则变量声明不会干扰已经存在的这类属性。\n\n#### 代码执行\n这个阶段会顺序执行代码，修改变量对象的值，执行完成后AO如下\n\n### 总结如下 ：\n1. 全局上下文的变量对象初始化是全局对象\n2. 函数上下文的变量对象初始化只包括 Arguments 对象\n3. 在进入执行上下文时会给变量对象添加形参、函数声明、变量声明等初始的属性值\n4. 在代码执行阶段，会再次修改变量对象的属性值\n\n(done)","slug":"js-进阶之执行上下文和执行栈","published":1,"updated":"2019-10-20T03:24:35.210Z","_id":"ck1ycenks0001rdje8a1i9wiq","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"什么是-javascript-执行上下文\">什么是 JavaScript 执行上下文？</h2>\n<blockquote>\n<p>执行上下文是评估和执行 JavaScript 代码的环境的抽象概念，Javascript 代码都是在执行上下文中运行。</p>\n</blockquote>\n<h2 id=\"什么是-javascript-执行栈\">什么是 JavaScript 执行栈？</h2>\n<blockquote>\n<p>执行栈，也叫调用栈，具有 LIFO（后进先出）结构，用于存储在代码执行期间创建的所有执行上下文。<br>\n首次运行JS代码时，会创建一个全局执行上下文并Push到当前的执行栈中。每当发生函数调用，引擎都会为该函数创建一个新的函数执行上下文并Push到当前执行栈的栈顶。<br>\n根据执行栈LIFO规则，当栈顶函数运行完成后，其对应的函数执行上下文将会从执行栈中Pop出，上下文控制权将移到当前执行栈的下一个执行上下文。</p>\n</blockquote>\n<h2 id=\"执行上下文的类型\">执行上下文的类型</h2>\n<p>执行上下文总共有三种类型</p>\n<ul>\n<li>全局执行上下文：只有一个，浏览器中的全局对象就是 window 对象，nodejs 中的全局对象就是 module 对象, this 指向这个全局对象。</li>\n<li>函数执行上下文：存在无数个，只有在函数被调用的时候才会被创建，每次调用函数都会创建一个新的执行上下文。</li>\n<li>Eval 函数执行上下文： 指的是运行在 eval 函数中的代码，很少用而且不建议使用。</li>\n</ul>\n<h2 id=\"执行上下文的创建\">执行上下文的创建</h2>\n<p>执行上下文分两个阶段创建：</p>\n<ol>\n<li>创建阶段</li>\n<li>执行阶段</li>\n</ol>\n<h3 id=\"创建阶段\">创建阶段</h3>\n<p>1、确定 this 的值，也被称为 This Binding。<br>\n2、LexicalEnvironment（词法环境） 组件被创建。<br>\n3、VariableEnvironment（变量环境） 组件被创建。</p>\n<h4 id=\"this-binding\">This Binding</h4>\n<ul>\n<li>全局执行上下文中， this 的值指向全局对象，在浏览器中 this 的值指向 window 对象，而在 nodejs 中指向这个文件的 module 对象。</li>\n<li>函数执行上下文中， this 的值取决于函数的调用方式。具体有：默认绑定、隐式绑定、显式绑定（硬绑定）、new绑定、箭头函数等，详情请看<a href=\"#%E5%87%BD%E6%95%B0%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87\">函数执行上下文</a></li>\n</ul>\n<h4 id=\"词法环境lexical-environment\">词法环境（Lexical Environment）</h4>\n<p>词法环境有两个组成部分</p>\n<ol>\n<li>\n<p>环境记录：存储变量和函数声明的实际位置</p>\n</li>\n<li>\n<p>对外部环境的引用：可以访问其外部词法环境</p>\n</li>\n</ol>\n<p>词法环境有两种类型</p>\n<ol>\n<li>\n<p>全局环境：是一个没有外部环境的词法环境，其外部环境引用为 null 。拥有一个全局对象（ window 对象）及其关联的方法和属性（例如数组方法）以及任何用户自定义的全局变量， this 的值指向这个全局对象。</p>\n</li>\n<li>\n<p>函数环境：用户在函数中定义的变量被存储在环境记录中，包含了 arguments 对象。对外部环境的引用可以是全局环境，也可以是包含内部函数的外部函数环境。</p>\n</li>\n</ol>\n<h4 id=\"变量环境\">变量环境</h4>\n<p>变量环境也是一个词法环境，因此它具有上面定义的词法环境的所有属性。</p>\n<p>在 ES6 中，词法环境和变量环境的区别在于前者用于存储 <strong>函数声明和变量（ let 和 const ）绑定，而后者仅用于存储变量（ var ）</strong> 绑定。</p>\n<blockquote>\n<p><strong>变量提升</strong>的原因：在创建阶段，函数声明存储在环境中，而变量会被设置为 undefined（在 var 的情况下）或保持未初始化（在 let 和 const 的情况下）。所以这就是为什么可以在声明之前访问 var 定义的变量（尽管是 undefined ），但如果在声明之前访问 let 和 const 定义的变量就会提示引用错误的原因。这就是所谓的变量提升。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">foo();  <span class=\"comment\">// foo2</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'foo1'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">foo();  <span class=\"comment\">// foo1，foo重新赋值</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'foo2'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">foo(); <span class=\"comment\">// foo1</span></span><br></pre></td></tr></table></figure>\n<p><strong>注意：</strong> 函数声明优先级高于变量声明，同一作用域下存在多个同名函数声明，后面的会替换前面的函数声明。</p>\n<h3 id=\"执行阶段\">执行阶段</h3>\n<p>此阶段，完成对所有变量的分配，最后执行代码。</p>\n<p>如果 Javascript 引擎在源代码中声明的实际位置找不到 let 变量的值，那么将为其分配 undefined 值。</p>\n<h2 id=\"执行上下文栈\">执行上下文栈</h2>\n<p>因为 JS 引擎创建了很多的执行上下文，所以 JS 引擎创建了执行上下文栈（Execution context stack，ECS）来管理执行上下文。</p>\n<p>当 JavaScript 初始化的时候会向执行上下文栈压入一个全局执行上下文，我们用 globalContext 表示它，并且只有当整个应用程序结束的时候，执行栈才会被清空，所以程序结束之前， 执行栈最底部永远有个 globalContext 。</p>\n<p>观察以下两段代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> scope = <span class=\"string\">\"global scope\"</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkscope</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> scope = <span class=\"string\">\"local scope\"</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> scope;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> f();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">checkscope();</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> scope = <span class=\"string\">\"global scope\"</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkscope</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> scope = <span class=\"string\">\"local scope\"</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> scope;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> f;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">checkscope()();</span><br></pre></td></tr></table></figure>\n<p>它们的运行结果是一样的，但执行上下文栈的变化不一样。<br>\n第一段代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ECStack.push(<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">checkscope</span>&gt;</span> functionContext);</span></span><br><span class=\"line\">ECStack.push(&lt;f&gt; functionContext);</span><br><span class=\"line\">ECStack.pop();</span><br><span class=\"line\">ECStack.pop();</span><br></pre></td></tr></table></figure>\n<p>第二段代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ECStack.push(<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">checkscope</span>&gt;</span> functionContext);</span></span><br><span class=\"line\"><span class=\"xml\">ECStack.pop();</span></span><br><span class=\"line\">ECStack.push(&lt;f&gt; functionContext);</span><br><span class=\"line\">ECStack.pop();</span><br></pre></td></tr></table></figure>\n<h2 id=\"函数执行上下文\">函数执行上下文</h2>\n<p>上面提到过<a href=\"#%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87%E7%9A%84%E7%B1%BB%E5%9E%8B\">执行上下文的类型</a>有全局执行上下文和函数执行上下文。</p>\n<p>在函数上下文中，用活动对象( activation object, AO )来表示变量对象。</p>\n<p>活动对象和变量对象的区别在于</p>\n<p>1、变量对象（ VO ）是规范上或者是 JS 引擎上实现的，并不能在 JS 环境中直接访问。<br>\n2、当进入到一个执行上下文后，这个变量对象才会被激活，所以叫活动对象（ AO ），这时候活动对象上的各种属性才能被访问。<br>\n调用函数时，会为其创建一个 Arguments 对象，并自动初始化局部变量 arguments ，指代该 Arguments 对象。所有作为参数传入的值都会成为 Arguments 对象的数组元素。</p>\n<h3 id=\"执行过程\">执行过程</h3>\n<p>执行上下文的代码会分成两个阶段进行处理</p>\n<ol>\n<li>进入执行上下文</li>\n<li>代码执行</li>\n</ol>\n<h4 id=\"进入执行上下文\">进入执行上下文</h4>\n<p>很明显，这个时候还没有执行代码，此时的变量对象会包括（如下顺序初始化）：</p>\n<ol>\n<li><strong>函数的所有形参 ( only 函数上下文)</strong>：没有实参，属性值设为 undefined 。</li>\n<li><strong>函数声明</strong>：如果变量对象已经存在相同名称的属性，则完全替换这个属性。</li>\n<li><strong>变量声明</strong>：如果变量名称跟已经声明的形参或函数相同，则变量声明不会干扰已经存在的这类属性。</li>\n</ol>\n<h4 id=\"代码执行\">代码执行</h4>\n<p>这个阶段会顺序执行代码，修改变量对象的值，执行完成后AO如下</p>\n<h3 id=\"总结如下\">总结如下 ：</h3>\n<ol>\n<li>全局上下文的变量对象初始化是全局对象</li>\n<li>函数上下文的变量对象初始化只包括 Arguments 对象</li>\n<li>在进入执行上下文时会给变量对象添加形参、函数声明、变量声明等初始的属性值</li>\n<li>在代码执行阶段，会再次修改变量对象的属性值</li>\n</ol>\n<p>(done)</p>\n","site":{"data":{}},"excerpt":"","more":"<h2>什么是 JavaScript 执行上下文？</h2>\n<blockquote>\n<p>执行上下文是评估和执行 JavaScript 代码的环境的抽象概念，Javascript 代码都是在执行上下文中运行。</p>\n</blockquote>\n<h2>什么是 JavaScript 执行栈？</h2>\n<blockquote>\n<p>执行栈，也叫调用栈，具有 LIFO（后进先出）结构，用于存储在代码执行期间创建的所有执行上下文。<br>\n首次运行JS代码时，会创建一个全局执行上下文并Push到当前的执行栈中。每当发生函数调用，引擎都会为该函数创建一个新的函数执行上下文并Push到当前执行栈的栈顶。<br>\n根据执行栈LIFO规则，当栈顶函数运行完成后，其对应的函数执行上下文将会从执行栈中Pop出，上下文控制权将移到当前执行栈的下一个执行上下文。</p>\n</blockquote>\n<h2>执行上下文的类型</h2>\n<p>执行上下文总共有三种类型</p>\n<ul>\n<li>全局执行上下文：只有一个，浏览器中的全局对象就是 window 对象，nodejs 中的全局对象就是 module 对象, this 指向这个全局对象。</li>\n<li>函数执行上下文：存在无数个，只有在函数被调用的时候才会被创建，每次调用函数都会创建一个新的执行上下文。</li>\n<li>Eval 函数执行上下文： 指的是运行在 eval 函数中的代码，很少用而且不建议使用。</li>\n</ul>\n<h2>执行上下文的创建</h2>\n<p>执行上下文分两个阶段创建：</p>\n<ol>\n<li>创建阶段</li>\n<li>执行阶段</li>\n</ol>\n<h3>创建阶段</h3>\n<p>1、确定 this 的值，也被称为 This Binding。<br>\n2、LexicalEnvironment（词法环境） 组件被创建。<br>\n3、VariableEnvironment（变量环境） 组件被创建。</p>\n<h4>This Binding</h4>\n<ul>\n<li>全局执行上下文中， this 的值指向全局对象，在浏览器中 this 的值指向 window 对象，而在 nodejs 中指向这个文件的 module 对象。</li>\n<li>函数执行上下文中， this 的值取决于函数的调用方式。具体有：默认绑定、隐式绑定、显式绑定（硬绑定）、new绑定、箭头函数等，详情请看<a href=\"#%E5%87%BD%E6%95%B0%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87\">函数执行上下文</a></li>\n</ul>\n<h4>词法环境（Lexical Environment）</h4>\n<p>词法环境有两个组成部分</p>\n<ol>\n<li>\n<p>环境记录：存储变量和函数声明的实际位置</p>\n</li>\n<li>\n<p>对外部环境的引用：可以访问其外部词法环境</p>\n</li>\n</ol>\n<p>词法环境有两种类型</p>\n<ol>\n<li>\n<p>全局环境：是一个没有外部环境的词法环境，其外部环境引用为 null 。拥有一个全局对象（ window 对象）及其关联的方法和属性（例如数组方法）以及任何用户自定义的全局变量， this 的值指向这个全局对象。</p>\n</li>\n<li>\n<p>函数环境：用户在函数中定义的变量被存储在环境记录中，包含了 arguments 对象。对外部环境的引用可以是全局环境，也可以是包含内部函数的外部函数环境。</p>\n</li>\n</ol>\n<h4>变量环境</h4>\n<p>变量环境也是一个词法环境，因此它具有上面定义的词法环境的所有属性。</p>\n<p>在 ES6 中，词法环境和变量环境的区别在于前者用于存储 <strong>函数声明和变量（ let 和 const ）绑定，而后者仅用于存储变量（ var ）</strong> 绑定。</p>\n<blockquote>\n<p><strong>变量提升</strong>的原因：在创建阶段，函数声明存储在环境中，而变量会被设置为 undefined（在 var 的情况下）或保持未初始化（在 let 和 const 的情况下）。所以这就是为什么可以在声明之前访问 var 定义的变量（尽管是 undefined ），但如果在声明之前访问 let 和 const 定义的变量就会提示引用错误的原因。这就是所谓的变量提升。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">foo();  <span class=\"comment\">// foo2</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'foo1'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">foo();  <span class=\"comment\">// foo1，foo重新赋值</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'foo2'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">foo(); <span class=\"comment\">// foo1</span></span><br></pre></td></tr></table></figure>\n<p><strong>注意：</strong> 函数声明优先级高于变量声明，同一作用域下存在多个同名函数声明，后面的会替换前面的函数声明。</p>\n<h3>执行阶段</h3>\n<p>此阶段，完成对所有变量的分配，最后执行代码。</p>\n<p>如果 Javascript 引擎在源代码中声明的实际位置找不到 let 变量的值，那么将为其分配 undefined 值。</p>\n<h2>执行上下文栈</h2>\n<p>因为 JS 引擎创建了很多的执行上下文，所以 JS 引擎创建了执行上下文栈（Execution context stack，ECS）来管理执行上下文。</p>\n<p>当 JavaScript 初始化的时候会向执行上下文栈压入一个全局执行上下文，我们用 globalContext 表示它，并且只有当整个应用程序结束的时候，执行栈才会被清空，所以程序结束之前， 执行栈最底部永远有个 globalContext 。</p>\n<p>观察以下两段代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> scope = <span class=\"string\">\"global scope\"</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkscope</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> scope = <span class=\"string\">\"local scope\"</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> scope;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> f();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">checkscope();</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> scope = <span class=\"string\">\"global scope\"</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkscope</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> scope = <span class=\"string\">\"local scope\"</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> scope;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> f;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">checkscope()();</span><br></pre></td></tr></table></figure>\n<p>它们的运行结果是一样的，但执行上下文栈的变化不一样。<br>\n第一段代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ECStack.push(<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">checkscope</span>&gt;</span> functionContext);</span></span><br><span class=\"line\">ECStack.push(&lt;f&gt; functionContext);</span><br><span class=\"line\">ECStack.pop();</span><br><span class=\"line\">ECStack.pop();</span><br></pre></td></tr></table></figure>\n<p>第二段代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ECStack.push(<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">checkscope</span>&gt;</span> functionContext);</span></span><br><span class=\"line\"><span class=\"xml\">ECStack.pop();</span></span><br><span class=\"line\">ECStack.push(&lt;f&gt; functionContext);</span><br><span class=\"line\">ECStack.pop();</span><br></pre></td></tr></table></figure>\n<h2>函数执行上下文</h2>\n<p>上面提到过<a href=\"#%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87%E7%9A%84%E7%B1%BB%E5%9E%8B\">执行上下文的类型</a>有全局执行上下文和函数执行上下文。</p>\n<p>在函数上下文中，用活动对象( activation object, AO )来表示变量对象。</p>\n<p>活动对象和变量对象的区别在于</p>\n<p>1、变量对象（ VO ）是规范上或者是 JS 引擎上实现的，并不能在 JS 环境中直接访问。<br>\n2、当进入到一个执行上下文后，这个变量对象才会被激活，所以叫活动对象（ AO ），这时候活动对象上的各种属性才能被访问。<br>\n调用函数时，会为其创建一个 Arguments 对象，并自动初始化局部变量 arguments ，指代该 Arguments 对象。所有作为参数传入的值都会成为 Arguments 对象的数组元素。</p>\n<h3>执行过程</h3>\n<p>执行上下文的代码会分成两个阶段进行处理</p>\n<ol>\n<li>进入执行上下文</li>\n<li>代码执行</li>\n</ol>\n<h4>进入执行上下文</h4>\n<p>很明显，这个时候还没有执行代码，此时的变量对象会包括（如下顺序初始化）：</p>\n<ol>\n<li><strong>函数的所有形参 ( only 函数上下文)</strong>：没有实参，属性值设为 undefined 。</li>\n<li><strong>函数声明</strong>：如果变量对象已经存在相同名称的属性，则完全替换这个属性。</li>\n<li><strong>变量声明</strong>：如果变量名称跟已经声明的形参或函数相同，则变量声明不会干扰已经存在的这类属性。</li>\n</ol>\n<h4>代码执行</h4>\n<p>这个阶段会顺序执行代码，修改变量对象的值，执行完成后AO如下</p>\n<h3>总结如下 ：</h3>\n<ol>\n<li>全局上下文的变量对象初始化是全局对象</li>\n<li>函数上下文的变量对象初始化只包括 Arguments 对象</li>\n<li>在进入执行上下文时会给变量对象添加形参、函数声明、变量声明等初始的属性值</li>\n<li>在代码执行阶段，会再次修改变量对象的属性值</li>\n</ol>\n<p>(done)</p>\n"},{"title":"Hello World","catalog":true,"date":"2019-10-16T15:02:43.000Z","subtitle":null,"header-img":null,"catagories":["Life"],"_content":"\n## hello world\n> This is a personal blog, only recording programming skills and knowledge\n>\n> It's my first post\n>\n> say: hello world!\n\n(done)","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ncatalog: true\ndate: 2019-10-16 23:02:43\nsubtitle:\nheader-img:\ntags:\n- Life\ncatagories:\n- Life\n---\n\n## hello world\n> This is a personal blog, only recording programming skills and knowledge\n>\n> It's my first post\n>\n> say: hello world!\n\n(done)","slug":"hello-world","published":1,"updated":"2019-10-20T03:37:34.431Z","_id":"ck1ycenkw0003rdjeejux6i9p","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"hello-world\">hello world</h2>\n<blockquote>\n<p>This is a personal blog, only recording programming skills and knowledge</p>\n<p>It’s my first post</p>\n<p>say: hello world!</p>\n</blockquote>\n<p>(done)</p>\n","site":{"data":{}},"excerpt":"","more":"<h2>hello world</h2>\n<blockquote>\n<p>This is a personal blog, only recording programming skills and knowledge</p>\n<p>It’s my first post</p>\n<p>say: hello world!</p>\n</blockquote>\n<p>(done)</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"ck1ycenks0001rdje8a1i9wiq","tag_id":"ck1ycenl00005rdje14ry1epq","_id":"ck1ycenl50008rdje610n6n8c"},{"post_id":"ck1ycenkw0003rdjeejux6i9p","tag_id":"ck1ycenl40007rdjeeew34suc","_id":"ck1ycenl60009rdje00i3b8l5"}],"Tag":[{"name":"JavaScript","_id":"ck1ycenl00005rdje14ry1epq"},{"name":"Life","_id":"ck1ycenl40007rdjeeew34suc"}]}}